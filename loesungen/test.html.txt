

















4.2.3 Module Contents



The module defines several functions, constants, and an exception. Some of the
functions are simplified versions of the full featured methods for compiled
regular expressions.  Most non-trivial applications always use the compiled
form.



  
  


  Compile a regular expression pattern into a regular expression
  object, which can be used for matching using its  and
   methods, described below.


The expression's behaviour can be modified by specifying a
   value.  Values can be any of the following variables,
  combined using bitwise OR (the  operator).



The sequence



prog = re.compile(pat)
result = prog.match(str)



is equivalent to



result = re.match(pat, str)



but the version using  is more efficient when the
expression will be used several times in a single program.







Perform case-insensitive matching; expressions like 
will match lowercase letters, too.  This is not affected by the
current locale.







Make ,
 dependent on the current locale.







When specified, the pattern character ""
matches at the beginning of the string and at the beginning of each
line (immediately following each newline); and the pattern character
"" matches at the end of the string and at the end of each
line (immediately preceding each newline).  By default,
"" matches only at the beginning of the
string, and "" only at the end of the string and
immediately before the newline (if any) at the end of the string.







Make the "" special character match any character at all,
including a newline; without this flag, "" will match
anything  a newline.






Make ,


dependent on the Unicode character properties database.









This flag allows you to write regular expressions that look nicer.
Whitespace within the pattern is ignored,
except when in a character class or preceded by an unescaped
backslash, and, when a line contains a "" neither in a
character class or preceded by an unescaped backslash, all characters
from the leftmost such "" through the end of the line are
ignored.





  
  

  Scan through  looking for a location where the regular
  expression  produces a match, and return a
  corresponding  instance.
  Return  if no
  position in the string matches the pattern; note that this is
  different from finding a zero-length match at some point in the string.





  
  

  If zero or more characters at the beginning of  match
  the regular expression , return a corresponding
   if the string does not
  match the pattern; note that this is different from a zero-length
  match.




If you want to locate a match anywhere in
  




  

  

  Split .  If
  capturing parentheses are used in , then the text of all
  groups in the pattern are also returned as part of the resulting list.
  If  splits
  occur, and the remainder of the string is returned as the final
  element of the list.  (Incompatibility note: in the original Python
  1.5 release,  was ignored.  This has been fixed in
  later releases.)




&gt;&gt;&gt; re.split('\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
&gt;&gt;&gt; re.split('(\W+)', 'Words, words, words.')
['Words', ', ', 'words', ', ', 'words', '.', '']
&gt;&gt;&gt; re.split('\W+', 'Words, words, words.', 1)
['Words', 'words, words.']





  

  

  Return a list of all non-overlapping matches of  in
  .  If one or more groups are present in the pattern,
  return a list of groups; this will be a list of tuples if the
  pattern has more than one group.  Empty matches are included in the
  result unless they touch the beginning of another match.
  


Changed in version 2.4:
Added the optional flags argument.





  
  


  Return an iterator over all non-overlapping matches for the RE
  .  For each match, the iterator returns
  a match object.  Empty matches are included in the result unless they
  touch the beginning of another match.
  


Changed in version 2.4:
Added the optional flags argument.






  
  

  Return the string obtained by replacing the leftmost non-overlapping
  occurrences of  by the replacement
   is returned
  unchanged.   can be a string or a function; if it is a
  string, any backslash escapes in it are processed.  That is,
  ""  is converted to a linefeed, and so forth.  Unknown escapes such as
  "", are
  replaced with the substring matched by group 6 in the pattern.  For
  example:




&gt;&gt;&gt; re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
...        r'static PyObject*\npy_\1(void)\n{',
...        'def myfunc():')
'static PyObject*\npy_myfunc(void)\n{'



If  is a function, it is called for every non-overlapping
  occurrence of .  The function takes a single match
  object argument, and returns the replacement string.  For example:



&gt;&gt;&gt; def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'

&gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'



The pattern may be a string or an RE object; if you need to specify
  regular expression flags, you must use a RE object, or use embedded
  modifiers in a pattern; for example, "sub("(?i)b+", "x", "bbbb
  BBBB").


The optional argument  is the maximum number of pattern
  occurrences to be replaced;  must be a non-negative
  integer.  If omitted or zero, all occurrences will be replaced.
  Empty matches for the pattern are replaced only when not adjacent to
  a previous match, so "" returns
  .



In addition to character escapes and backreferences as described
  above, "" will use the substring matched by the group
  named " syntax.
  "" uses the corresponding group number;
  "", but isn't
  ambiguous in a replacement such as ""  would be interpreted as a reference to group 20, not a reference to
  group 2 followed by the literal character "".  The
  backreference "" substitutes in the entire substring
  matched by the RE.





  
  

  Perform the same operation as , but return a tuple
  .





  
  

  Return  with all non-alphanumerics backslashed; this is
  useful if you want to match an arbitrary literal string that may have
  regular expression metacharacters in it.






  Exception raised when a string passed to one of the functions here
  is not a valid regular expression (for example, it might contain
  unmatched parentheses) or when some other error occurs during
  compilation or matching.  It is never an error if a string contains
  no match for a pattern.










<a rel="prev" title="4.2.2 matching vs Searching"
  href="matching-searching.html"><img src='../icons/previous.png'
  border='0' height='32'  alt='Previous Page' width='32' />
<a rel="parent" title="4.2 re  "
  href="module-re.html"><img src='../icons/up.png'
  border='0' height='32'  alt='Up one Level' width='32' />
<a rel="next" title="4.2.4 regular Expression Objects"
  href="re-objects.html"><img src='../icons/next.png'
  border='0' height='32'  alt='Next Page' width='32' />

<a rel="contents" title="Table of Contents"
  href="contents.html"><img src='../icons/contents.png'
  border='0' height='32'  alt='Contents' width='32' />
<img src='../icons/modules.png'
  border='0' height='32'  alt='Module Index' width='32' />
<a rel="index" title="Index"
  href="genindex.html"><img src='../icons/index.png'
  border='0' height='32'  alt='Index' width='32' />
















See  for information on suggesting changes.




